services:
  mariadb:
    image: mariadb:latest
    environment:
      MARIADB_HOST: ${MARIADB_HOST}
      MARIADB_PORT: ${MARIADB_PORT}
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MARIADB_DATABASE: ${MARIADB_DATABASE}
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./bdd_data:/var/lib/mysql
    networks:
      - app-network
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    profiles: ["monitoring"]
    ports:
      - "3000:3000"
    volumes:
      - ./grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - /home/david/grafana-plugin/dee-objectifbar-panel:/var/lib/grafana/plugins/dee-objectifbar-panel
    environment:
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=dee-objectifbar-panel
      - GF_RENDERING_SERVER_URL=http://grafana-renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
      - GF_LOG_FILTERS=rendering:debug
    depends_on:
      - mariadb
      - renderer
    networks:
      - app-network
  renderer:
    image: grafana/grafana-image-renderer:latest
    container_name: grafana-renderer
    profiles: ["monitoring"]
    expose:
      - 8081
    networks:
      - app-network
    
  web:
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      MARIADB_HOST: ${MARIADB_HOST}
      MARIADB_PORT: ${MARIADB_PORT}
      MARIADB_DATABASE: ${MARIADB_DATABASE}
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
    ports:
      - "80:80"
    depends_on:
      - mariadb
    volumes:
      - ${WWW_PATH}:/var/www/html # Dossier racine du serveur
      - ${CERTS_PATH}:/etc/apache2/ssl # Dossier contenant les certificats
      - ./conf/php/php.ini-development:/usr/local/etc/php/php.ini # Montre le fichier php.ini
      - ./conf/apache2/default-ssl.conf:/etc/apache2/sites-available/default-ssl.conf # Montre la config SSL
    networks:
      - app-network
  proxy:
    image: nginx:alpine
    container_name: proxy
    profiles: ["dev"]
    ports:
      - "443:443"
    volumes:
      - ./conf/nginx:/etc/nginx/conf.d
      - ./conf/certs:/etc/nginx/certs
    depends_on:
      - web
    networks:
      - app-network

  vite:
    image: node:22
    container_name: vite
    profiles: ["dev"]
    working_dir: /app
    volumes:
      - ..:/app
    ports:
      - "5173:5173"
    command: sh -c "npm install && npm run dev"
    networks:
      - app-network
    depends_on:
      - web
networks:
  app-network:
    driver: bridge